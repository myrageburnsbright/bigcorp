import random, string

from django.db import models
from django.urls import reverse
from django.utils.text import slugify

def rand_slug():
    """
    Returns a random 3-character slug string (letters and digits)
    """

    return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(3))

class Category(models.Model):
    """
    Represents a category in the database.
    Categories can have a hierarchical structure, with a parent category referencing another Category instance.
    """

    name = models.CharField('Категория',max_length=250, db_index=True)
    parent = models.ForeignKey(verbose_name='Родительская категория',to='self', blank=True, null=True, on_delete=models.CASCADE, related_name='children'
        )
    slug = models.SlugField('URL', max_length=250, null=False, editable=True, unique=True)
    created_at = models.DateTimeField('Дата создания', auto_now_add=True)

    class Meta:
        unique_together = ('slug','parent')
        verbose_name = ("Категория")
        verbose_name_plural = ("Категории")
        
    def __str__(self):
        """
        Return a string representation of the category, showing the full 
        hierarchy path from the root category to the current category. 
        Each category name in the path is separated by ' -> '.
        """

        full_path = [self.name]
        k = self.parent
        while k is not None:    
            full_path.append(k.name)
            k = k.parent
        return ' -> '.join(full_path[::-1]) 
    
    def save(self, *args, **kwargs):
        """
        Overwrite the save method to generate a slug if it is not present.
        The slug is generated by concatenating a random 3-character string
        with the name of the category and passing it through the slugify
        function.
        """
        
        if not self.slug:
            self.slug = slugify(rand_slug() + '-pickBetter' + self.name)
        super(Category, self).save(*args, **kwargs)

    def get_absolute_url(self):
        return reverse("shop:category_list", kwargs={"slug": self.slug})
    
class Product(models.Model):
    """
    Represents a product in the database.
    """

    category = models.ForeignKey(Category, on_delete=models.CASCADE, related_name='products')
    title = models.CharField('Название',max_length=250)
    brand = models.CharField('Брэнд',max_length=250)
    slug = models.SlugField('URL', max_length=250)
    image = models.ImageField('Изображение',upload_to='products/products/%Y/%m/%d')
    description = models.TextField('Описание', blank=True)
    price = models.DecimalField('Цена', max_digits=7, decimal_places=2, default=0.00)
    created_at = models.DateTimeField('Дата создания', auto_now_add=True)
    updated_at = models.DateTimeField('Дата обновления', auto_now=True)
    available = models.BooleanField('В наличии', default=True)

    class Meta:
        verbose_name = ("Продукт")
        verbose_name_plural = ("Продукты")
        
    def __str__(self):
        return self.title
    def get_absolute_url(self):
        return reverse("shop:product", kwargs={"slug": self.slug})

class ProductManager(models.Manager):
    def get_queryset(self):
        """
        Return a queryset of products that are available.

        This method overrides the default `get_queryset` method to filter
        products that have the `available` attribute set to True.
        """

        return super(ProductManager, self).get_queryset().filter(available=True)

class ProductProxy(Product):
    """
    A proxy model for the Product model, providing a custom manager.

    This model behaves exactly like the Product model, but with a custom manager
    (ProductManager) that can be used to define custom querysets and methods.

    This proxy model does not create a new database table, but rather provides
    an alternate interface to the existing Product model.
    """

    objects = ProductManager()

    class Meta:
        proxy = True